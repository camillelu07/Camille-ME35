"""
Servo controller for MG90s micro servos on ESP32
Handles PWM control and angle-to-duty cycle conversion
"""

from machine import Pin, PWM

class ServoController:
    def __init__(self, servo1_pin, servo2_pin, freq=50):
        """
        Initialize servo controller
        
        Args:
            servo1_pin: GPIO pin number for base servo (theta1)
            servo2_pin: GPIO pin number for elbow servo (theta2)
            freq: PWM frequency in Hz (default 50Hz for standard servos)
        """
        self.servo1 = PWM(Pin(servo1_pin), freq=freq)
        self.servo2 = PWM(Pin(servo2_pin), freq=freq)
        
        # Calibration values (adjust if needed for your specific servos)
        self.min_duty_ns = 500000    # 0.5ms -> 180°
        self.max_duty_ns = 2500000   # 2.5ms -> 0°
        self.center_duty_ns = 1500000  # 1.5ms -> 90°
        
        print(f"Servos initialized on pins {servo1_pin} and {servo2_pin}")
    
    def angle_to_duty_ns(self, angle):
        """
        Convert angle (0-180°) to PWM duty cycle in nanoseconds
        
        Args:
            angle: Servo angle in degrees (0-180)
            
        Returns:
            Duty cycle in nanoseconds
        """
        # Ensure angle is within bounds
        angle = max(0, min(180, angle))
        
        # Linear interpolation
        # 0° -> 2,500,000 ns (2.5ms)
        # 180° -> 500,000 ns (0.5ms)
        duty_ns = int(self.max_duty_ns - (angle / 180.0) * (self.max_duty_ns - self.min_duty_ns))
        
        return duty_ns
    
    def move_servo1(self, angle):
        """
        Move base servo (theta1) to specified angle
        
        Args:
            angle: Target angle in degrees (0-180)
        """
        duty_ns = self.angle_to_duty_ns(angle)
        self.servo1.duty_ns(duty_ns)
    
    def move_servo2(self, angle):
        """
        Move elbow servo (theta2) to specified angle
        
        Args:
            angle: Target angle in degrees (0-180)
        """
        duty_ns = self.angle_to_duty_ns(angle)
        self.servo2.duty_ns(duty_ns)
    
    def move_to_angles(self, theta1, theta2):
        """
        Move both servos to specified angles simultaneously
        
        Args:
            theta1: Base servo angle in degrees (0-180)
            theta2: Elbow servo angle in degrees (0-180)
        """
        self.move_servo1(theta1)
        self.move_servo2(theta2)
    
    def set_calibration(self, min_ns=500000, max_ns=2500000):
        """
        Set custom calibration values for servos
        Use this if your servos have different pulse width requirements
        
        Args:
            min_ns: Pulse width for 180° in nanoseconds
            max_ns: Pulse width for 0° in nanoseconds
        """
        self.min_duty_ns = min_ns
        self.max_duty_ns = max_ns
        self.center_duty_ns = (min_ns + max_ns) // 2
        print(f"Calibration updated: {min_ns}ns to {max_ns}ns")
    
    def center_servos(self):
        """
        Move both servos to center position (90°)
        """
        self.move_to_angles(90, 90)
    
    def home_servos(self):
        """
        Move both servos to home position (0°)
        """
        self.move_to_angles(0, 0)
    
    def deinit(self):
        """
        Deinitialize PWM channels
        """
        self.servo1.deinit()
        self.servo2.deinit()
        print("Servos deinitialized")
